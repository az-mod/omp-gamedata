
----------------------------------------------------------------------------------------------------------------------
class "mp_actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------

function mp_actor_binder:__init (obj) super(obj)
	printf_msg('mp_actor_binder:__init');
end

----------------------------------------------------------------------------------------------------------------------

function mp_actor_binder:net_spawn(data)
	printf_msg("[%s] net_spawn", self.object:name())
	if object_binder.net_spawn(self,data) == false then
		return false	
	end
	db.del_mp_actor()
	db.add_mp_actor(self.object)
	return true
end

----------------------------------------------------------------------------------------------------------------------

function mp_actor_binder:net_destroy()
	printf_msg("[%s] net_destroy", self.object:name())
	-- net_destroy может быть вызывать после респавна и установки нового mp_actor
	if db.mp_actor and db.mp_actor:id() == self.object:id() then
		db.del_mp_actor()
	end
	object_binder.net_destroy(self)
end
----------------------------------------------------------------------------------------------------------------------

function mp_actor_binder:reinit()
	object_binder.reinit(self)
	
	db.storage[self.object:id()] = { }
	
	self.object:set_callback(callback.use_object, self.use_callback, self)
	self.object:set_callback(callback.on_item_take, self.on_item_take, self)
	self.object:set_callback(callback.on_item_drop, self.on_item_drop, self)
	self.object:set_callback(callback.death, self.death_callback, self)
end
----------------------------------------------------------------------------------------------------------------------

function mp_actor_binder:update(delta)
	
end

function mp_actor_binder:on_item_take(obj)
	printf_msg("[%s] take item [%s]", self.object:name(), obj:name())
end

function mp_actor_binder:on_item_drop(obj)
	printf_msg("[%s] drop item [%s]", self.object:name(), obj:name())
end

function mp_actor_binder:use_callback(obj)
	printf_msg("[%s] use [%s]", self.object:name(), obj:name())
end

function mp_actor_binder:death_callback(victim, who)
	printf_msg("[%s] death. Killer [%s]", self.object:name(), who:name())

	victim:set_callback(callback.use_object, nil)
	victim:set_callback(callback.on_item_take, nil)
	victim:set_callback(callback.on_item_drop, nil)
	victim:set_callback(callback.death, nil)
end

----------------------------------------------------------------------------------------------------------------------
function mp_actor_binder:save(packet)
	object_binder.save(self, packet)
end
----------------------------------------------------------------------------------------------------------------------
function mp_actor_binder:load(reader)
	object_binder.load(self, reader)
end




